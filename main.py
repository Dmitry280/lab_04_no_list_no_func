""" –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ4: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É —Ñ—É–Ω–∫—Ü–∏–π
–≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∑–Ω–∞—á–µ–Ω–∏–π —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º –æ—Ç—Ä–µ–∑–∫–µ –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö.
–ê–≤—Ç–æ—Ä: –î—É—Ä–±–∞–ª–µ –î.–ê. –ò–£7-31–ë–í
–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ30:
ùëî1 = ùëé^3‚àí23.8ùëé^2+44.9ùëé‚àí10.34
ùëî2 = ùëéùëôùëõùëé ‚àí 6
ùëî3 = sqrt(|ùëî1ùëî2|)
ùëé0 = 1.2    h = 0.2  ùëéùëõ = 6
–û–ø–µ—Ä–∞—Ç–æ—Ä: for
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
1) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ ùëî1ùëöùëéùë• ‚àí ùëî2ùëöùëéùë•.
"""

from math import pow, sqrt, log

# –±–ª–æ–∫ –≤–≤–æ–¥–∞
a0 = float(input("Input a0 value: "))
an = float(input("Input an value: "))
h = abs(float(input("Input h (step) value: ")))
while h > an - a0:
    h = abs(float(input(f"Input correct value of h (step) less, than {an - a0:.2g}: ")))

count = round(abs(an - a0) / h)  # –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ

i = 0
g1 = 0
g2 = 0
g3 = 0
g = 4  # —á–∏—Å–ª–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
a = a0
# –≤—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞
max_a_width = 0
max_g1_width = 0
max_g2_width = 0
max_g3_width = 0
cycle_count = 0
for i in range(0, count + 1, 1):
    g1 = pow(a, 3) - 23.8 * pow(a, 2) + 44.9 * a - 10.34
    if a < 0 or a == 0:
        g2 = "Not defined"
    else:
        g2 = (a * log(a)) - 6
    if g2 != "Not defined":
        g3 = sqrt(abs(g1 * g2))
    else:
        g3 = "Not defined"
    if len(str(round(a, g))) > max_a_width:
        max_a_width = len(str(round(a, g)))

    if len(str(round(g1, g))) > max_g1_width:
        max_g1_width = len(str(round(g1, g)))

    if g2 != "Not defined":
        if len(str(round(g2, g))) > max_g2_width:
            max_g2_width = len(str(round(g2, g)))

        if len(str(round(g3, g))) > max_g3_width:
            max_g3_width = len(str(round(g3, g)))
    if g2 == "Not defined":
        max_g2_width = len("Not defined")
        max_g3_width = len("Not defined")
    a += h

# –±–ª–æ–∫ –≤—ã–≤–æ–¥–∞
# –≤—ã–≤–æ–¥–∏–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
print("+", max_a_width * '-',
      "+", max_g1_width * '-',
      "+", max_g2_width * '-',
      "+", max_g3_width * '-',
      "+", sep='-')
print('|', 'a:'.center(max_a_width),  # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —è—á–µ–π–∫–∏
      '|', 'g1:'.center(max_g1_width),
      '|', 'g2:'.center(max_g2_width),
      '|', 'g3:'.center(max_g3_width), '|',
      sep=' ')
# –≤—ã–≤–æ–¥–∏–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
a = a0
for i in range(0, count + 1, 1):
    g1 = pow(a, 3) - 23.8 * pow(a, 2) + 44.9 * a - 10.34
    if a <= 0:
        g2 = "Not defined"
    else:
        g2 = (a * log(a)) - 6
    if g2 != "Not defined":
        g3 = sqrt(abs(g1 * g2))
    else:
        g3 = "Not defined"
    if g2 != "Not defined":
        print("+", f"{max_a_width * '-'}",
              "+", f"{max_g1_width * '-'}",
              "+", f"{max_g2_width * '-'}",
              "+", f"{max_g3_width * '-'}",
              "+", sep='-')
        print('|', f"{a:.4g}".center(max_a_width),
              '|', f"{g1:.4g}".center(max_g1_width),
              '|', f"{g2:.4g}".center(max_g2_width),
              '|', f"{g3:.4g}".center(max_g3_width),
              '|')
    else:
        print("+", f"{max_a_width * '-'}",
              "+", f"{max_g1_width * '-'}",
              "+", f"{max_g2_width * '-'}",
              "+", f"{max_g3_width * '-'}",
              "+", sep='-')
        print('|', f"{a:.4g}".center(max_a_width),
              '|', f"{g1:4g}".center(max_g1_width),
              '|', g2.center(max_g2_width),
              '|', g3.center(max_g3_width),
              '|')
    a += h

print("+", f"{max_a_width * '-'}",
      "+", f"{max_g1_width * '-'}",
      "+", f"{max_g2_width * '-'}",
      "+", f"{max_g3_width * '-'}",
      "+", sep='-')

# print("Cycles done: ", cycle_count)

# —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫:
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Å–µ—á–µ–∫ –Ω–∞ –æ—Å–∏ g1
marker_count = input("Input the number of marks on g1 axis (4-8): ")
markers_lst = ['4', '5', '6', '7', '8']

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Å–µ—á–µ–∫
while marker_count not in markers_lst:
    marker_count = input("The number of marks should be an integer between 4 and 8: ")
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞—Å—à—Ç–∞–± –≥—Ä–∞—Ñ–∏–∫–∞
scale = int(input("Input the graph area scale (width): "))
print()
print("The g1 graph is:".upper().center(scale))
print()
# —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –∑–∞—Å–µ—á–∫–∏

# —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–≥ –º–µ–∂–¥—É –∑–∞—Å–µ—á–∫–∞–º–∏

g1_min = 0
g1_max = 0
g1_count = 0
a = a0
for i in range(0, count + 1, 1):  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞—Å–µ—á–µ–∫
    g1 = pow(a, 3) - 23.8 * pow(a, 2) + 44.9 * a - 10.34
    if g1 < g1_min:
        g1_min = g1
    if g1 > g1_max:
        g1_max = g1
    a += h
    g1_count += 1
# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞—Å–µ—á–µ–∫
step_len = (g1_max - g1_min) / (int(marker_count) - 1)
dpi = scale / abs(g1_min - g1_max)
# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Å–µ—á–∫–∏
marker_len_sum = 0
marker_len_avg = 0
g1 = g1_min
m_count = 0
for i in range(1, int(marker_count) + 1, 1):
    if abs(round(g1)) < 1000:
        marker_len_sum = marker_len_sum + len(str(round(g1, 2)))
        m_count += 1
        marker_len_avg = round((marker_len_sum / m_count), 4)
        g1 += step_len
    else:
        marker_len_sum = marker_len_sum + len(str(f"{g1:.2e}"))
        m_count += 1
        marker_len_avg = round((marker_len_sum / m_count), 4)
        g1 += step_len
g1 = g1_min
g1_mark_str = ''
max_g1_width = int(scale / (max_g1_width-1))
c = round(scale / (int(marker_count) - 1) - marker_len_avg)
print("c is: ", c)
for i in range(1, int(marker_count) + 1, 1):
    if abs(round(g1)) < 1000:
        g1_mark_str = g1_mark_str + str(round(g1, 2)) + abs(c) * ' '  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞—Å–µ—á–∫–∞–º–∏
        g1 += step_len
    else:
        g1 = str(f"{g1:.2e}")
        g1_mark_str = g1_mark_str + g1 + abs(c) * ' '  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞—Å–µ—á–∫–∞–º–∏
        g1 = float(g1)
        g1 += step_len
print((max_a_width + 1) * ' ', g1_mark_str, sep=' ')
print('0'.center(max_a_width + 1), round(marker_len_avg / 2 - 2) * ' ', scale * '-', '>', "g1 axis", sep=' ')

# –≤—ã–≤–æ–¥–∏–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –æ—Å—å "–∞" –∏ —Å–∞–º –≥—Ä–∞—Ñ–∏–∫
a = a0
g1_min = round(g1_min * dpi)
g1_max = round(g1_max * dpi)
for i in range(0, count + 1, 1):
    g1 = pow(a, 3) - 23.8 * pow(a, 2) + 44.9 * a - 10.34
    g1 = round(g1 * dpi)
    if g1 < 0:
        print(f"{round(a, 2)}".center(max_a_width + 1),  # –≤—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
              round(marker_len_avg / 2) * ' ',
              (abs(g1_min) - abs(g1)) * ' ',
              '*',  # –º–∞—Ä–∫–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
              (abs(g1) - 1) * ' ',
              '|',  # –º–∞—Ä–∫–µ—Ä –æ—Å–∏
              sep='')

    if g1 > 0:
        print(f"{round(a, 2)}".center(max_a_width + 1),  # –≤—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
              round(marker_len_avg / 2) * ' ',
              abs(g1_min) * ' ',
              '|',  # –º–∞—Ä–∫–µ—Ä –æ—Å–∏
              (g1 - 1) * ' ',  # —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è "–∞" –¥–æ –∑–≤–µ–∑–¥–æ—á–∫–∏
              '*',  # –º–∞—Ä–∫–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
              sep='')
        # i += 1
    a += h
# –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–∏ "–∞"
print((max_a_width + 1) * ' ', round(marker_len_avg / 2) * ' ', abs(g1_min) * ' ', 'v', sep='')
print((max_a_width + 1) * ' ', round(marker_len_avg / 2) * ' ', abs(g1_min) * ' ', 'a axis', sep='')
